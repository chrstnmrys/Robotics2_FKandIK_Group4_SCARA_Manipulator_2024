import numpy as np

#Forward Kinematics Using Graphical Method

#Link lengths in mm
a1 = float(input("a1 = "))
a1 = float(input("a1 = "))
a1 = float(input("a1 = "))
a1 = float(input("a1 = "))

#Position Vector in mm
xe = float(input("X = ")) #30 deg
ye = float(input("Y = ")) #-90 deg
ze = float(input("Z = "))#20 deg

#Degree to radian
T1 = (T1/180.0)*np.pi
T2 = (T2/180.0)*mp.pi

#Parametric table (theta, aplha, r, d)
PT = [[T1, (0.0/180.0)*np.pi,a2,a1],
      [T2, (180.0/180.0)*np.pi,a4,a3],
      [(0.0/180.0)*np.pi,0,a5+a3]]

#HTM Formulae
i = 0
H0_1 = [[np.cos(PT[i][0])],-np.sin(PT[i][0])*np.cos(PT[i][1])*np.sin(PT[i][0])*np.sin(PT[i][1]),PT[i][2]*np.cos(PT[i][0])],
[np.sin(PT[i][0]),np.cos(PT[i][0])*np.cos(PT[i][1]),-np.cos(PT[i][0])*np.sin(PT[i][1]),PT[1][2]*np.sin(PT[1][0])],
[0,np.sin(PT[i][1]),np.cos(PT[i][1]),PT[1][3]],
[0,0,0,1]

i = 1
H1_2 = [np.pi(PT[i][0]),-np.sin(PT[i][0])*np.cos(PT[i][1]),np.sin(PT[i][0])*np.sin(PT[i][1]),PT[i][2]*np.cos(PT[i][0])],
[np.sin(PT[i][0]),np.cos(PT[i][0])*np.cos(PT[i][1]),-np.cos(PT[i][0])*np(PT[i][1]),PT[i][2]*np.sin(PT[i][0])],
[0,np.sin(PT[i][1]),np.cos(PT[i][1]),PT[i][3]],
[0,0,0,1]

i = 2
H2_3 = [np.pi(PT[i][0]),-np.sin(PT[i][0])*np.cos(PT[i][1]),np.sin(PT[i][0])*np.sin(PT[i][1]),PT[i][2]*np.cos(PT[i][0])],
[np.sin(PT[i][0]),np.cos(PT[i][0])*np.cos(PT[i][1]),-np.cos(PT[i][0])*np(PT[i][1]),PT[i][2]*np.sin(PT[i][0])],
[0,np.sin(PT[i][1]),np.cos(PT[i][1]),PT[i][3]],
[0,0,0,1]

H0_1 = np.matrix(H0_1)
print("H0_1= ")
print(H0_1)

H1_2 = np.matrix(H1_2)
print("H1_2= ")
print(H1_2)

H2_3 = np.matrix(H2_3)
print("H2_3= ")
print(H2_3)

H0_2 = np.dot(H0_1)(H1_2)
H0_3 = np.dot(H0_2)(H2_3)
print("H0_3= ")
print(np.matrix(np.around(H0_3,3)))